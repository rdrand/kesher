apply plugin: 'java'
apply plugin: 'war'
apply plugin: 'eclipse'

repositories {
    mavenCentral()
    maven {
        url 'https://repo.spring.io/libs-release'
    }
}

sourceSets {
    main {
        java {
            srcDirs = ['src']
        }
        resources {
            srcDirs = ['resources']
        }
    }
    test {
    	java {
    		srcDirs = ['test']
    	}
    }
}

sourceCompatibility='1.8'
targetCompatibility='1.8'

ext.slf4j_version = "1.7.25"
ext.spring_version = "5.0.1.RELEASE"
ext.junit4Version        = '4.12'
ext.junitVintageVersion  = '4.12.1'
ext.junitPlatformVersion = '1.0.1'
ext.junitJupiterVersion  = '5.0.1'
ext.log4jVersion         = '2.9.0'

dependencies {
	compile "org.slf4j:slf4j-api:${slf4j_version}"
	compile "org.slf4j:slf4j-log4j12:${slf4j_version}"
	compile "org.springframework:spring-webmvc:${spring_version}"
	compile 'org.springframework.data:spring-data-mongodb:2.0.1.RELEASE'
	
	
	// JUnit Jupiter API and TestEngine implementation
	testCompile("org.junit.jupiter:junit-jupiter-api:${junitJupiterVersion}")
	testRuntime("org.junit.jupiter:junit-jupiter-engine:${junitJupiterVersion}")
	// If you also want to support JUnit 3 and JUnit 4 tests
	testCompile("junit:junit:${junit4Version}")
	testRuntime("org.junit.vintage:junit-vintage-engine:${junitVintageVersion}")
	// To avoid compiler warnings about @API annotations in JUnit code
	testCompileOnly('org.apiguardian:apiguardian-api:1.0.0')
	// To use Log4J's LogManager
	testRuntime("org.apache.logging.log4j:log4j-core:${log4jVersion}")
	testRuntime("org.apache.logging.log4j:log4j-jul:${log4jVersion}")
	// Only needed to run tests in an (IntelliJ) IDE(A) that bundles an older version
	testRuntime("org.junit.platform:junit-platform-launcher:${junitPlatformVersion}")
}

